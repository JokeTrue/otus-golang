// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JokeTrue/otus-golang/hw12_13_14_15_calendar/event (interfaces: UseCase)

// Package mock_event is a generated GoMock package.
package usecase

import (
	reflect "reflect"
	time "time"

	models "github.com/JokeTrue/otus-golang/hw12_13_14_15_calendar/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method
func (m *MockUseCase) CreateEvent(arg0 int64, arg1, arg2, arg3, arg4 string, arg5 time.Duration) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockUseCaseMockRecorder) CreateEvent(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockUseCase)(nil).CreateEvent), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteEvent mocks base method
func (m *MockUseCase) DeleteEvent(arg0 int64, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockUseCaseMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockUseCase)(nil).DeleteEvent), arg0, arg1)
}

// GetEvents mocks base method
func (m *MockUseCase) GetEvents(arg0, arg1 time.Time) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockUseCaseMockRecorder) GetEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockUseCase)(nil).GetEvents), arg0, arg1)
}

// GetUserEvents mocks base method
func (m *MockUseCase) GetUserEvents(arg0 int64, arg1 models.Interval, arg2 string) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEvents indicates an expected call of GetUserEvents
func (mr *MockUseCaseMockRecorder) GetUserEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvents", reflect.TypeOf((*MockUseCase)(nil).GetUserEvents), arg0, arg1, arg2)
}

// RetrieveEvent mocks base method
func (m *MockUseCase) RetrieveEvent(arg0 int64, arg1 uuid.UUID) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveEvent", arg0, arg1)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEvent indicates an expected call of RetrieveEvent
func (mr *MockUseCaseMockRecorder) RetrieveEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEvent", reflect.TypeOf((*MockUseCase)(nil).RetrieveEvent), arg0, arg1)
}

// UpdateEvent mocks base method
func (m *MockUseCase) UpdateEvent(arg0 int64, arg1 *models.Event, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockUseCaseMockRecorder) UpdateEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockUseCase)(nil).UpdateEvent), arg0, arg1, arg2)
}
